local FList = require("utils.FList")
describe("FList simple tests", function()
  it("should map", function()
    local list = FList({ 1, 2, 3 })
    assert.are.same({ 2, 3, 4 }, list:map(function(e) return e + 1 end))
  end)
  it("should filter", function()
    local list = FList({ 1, 2, 3 })
    assert.are.same({ 1, 3 }, list:filter(function(e) return e ~= 2 end))
  end)
  it("should reduce", function()
    local list = FList({ 1, 2, 3 })
    assert.are.same(6, list:reduce(function(acc, e) return acc + e end, 0))
  end)
  it("should return size", function()
    local list = FList({ 1, 2, 3 })
    assert.are.same(3, list:size())
  end)
  it("should return unique elements as new FList", function()
    local list = FList({ 1, 6, 3,1,6,3,3,6,1,4 })
    assert.are.same({1,6,3,4}, list:unique())
  end)
  it("should take n elements", function ()
    local list = FList({1,2,3,4,5,6})
    local taken = list:take(3)
    assert.are.same({1,2,3}, taken)
    assert.are.same({4,5,6}, list)

  end)
end)

describe("FList advanced tests", function()
  it("should filter then map", function()
    local list = FList({ 1, 2, 3, 4 })
    assert.are.same({ 2, 4, 5 }, list
      :filter(function(e) return e ~= 2 end)
      :map(function(e) return e + 1 end))
  end)
end)
